{"version":3,"file":"ttmik.js","sources":["../../src/kotlinVue.kt","core/collections.kt","../../src/script-inscription.kt"],"sourcesContent":[null,"/*\n * Copyright 2010-2016 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.math.floor\n\n/** Returns the array if it's not `null`, or an empty array otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n@library(\"arrayToString\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun arrayToString(array: Array<*>): String = definedExternally\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> MutableList<T>.shuffle(): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = rand(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\nprivate fun rand(upperBound: Int) = floor(kotlin.js.Math.random() * upperBound).toInt()\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n */\npublic fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n\n    array.asDynamic().sort(comparator.asDynamic().compare.bind(comparator))\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal fun <T> arrayOfNulls(reference: Array<out T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n// no singleton map implementation in js, return map as is\ninternal inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\ninternal inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\ninternal inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n        if (isVarargs)\n        // no need to copy vararg array in JS\n            this\n        else\n            this.copyOf()\n",null],"names":[],"mappings":";;;;;;;;;;IACI,gBAAa,E;IACb,aAA8B,gB;IAC9B,UAAe,I;IACf,gBAA4B,I;IAC5B,iBAAsB,I;IACtB,mBAAwB,I;IACxB,mBAAwB,I;IACxB,mBAAwB,I;IACxB,mBAAwB,I;IACxB,qBAA0B,I;IAC1B,wBAA6B,I;IAC7B,uBAA4B,I;IAC5B,wBAA6B,I;IAC7B,yBAA8B,I;EAdlC,C;;IAgBmB,mB;MACP,cAAsB,E;MACtB,aAAK,OAAL,C;MACA,OAAO,O;IAHA,C;EAAA,C;;IAAX,gBAAW,+B;EAKf,C;;IAEI,iBAAY,E;IACZ,KAAK,cAAL,C;EACJ,C;;IAEI,mBAAc,E;IACd,KAAK,gBAAL,C;EACJ,C;;IAEI,mBAAc,O;EAClB,C;;IAEI,mBAAc,O;EAClB,C;;IAEI,mBAAc,O;EAClB,C;;IAEI,qBAAgB,S;EACpB,C;;IAEI,wBAAmB,Y;EACvB,C;;IAEI,uBAAkB,W;EACtB,C;;IAEI,wBAAmB,Y;EACvB,C;;IAEI,yBAAoB,a;EACxB,C;;;;;;;IAKA,UAAkB,G;IAClB,GAAI,WAAU,GAAV,EAAe,UAAU,IAAV,CAAf,C;EACR,C;;IAGI,UAAU,IAAI,IAAJ,CAAV,C;EACJ,C;ECvCA,uD;;ID0CI,WAAW,mB;IACN,KAAL,IAAK,C;IACL,UAAgB,E;IAChB,WAAS,IAAK,S;IACd,gBAAgB,GAAhB,EAAqB,IAArB,C;IAEA,YC/C2D,YD+C/C,IAAK,MC/C0C,C;IDiD3D,OAAO,G;EACX,C;;IAGI,WAAW,mB;IACN,KAAL,IAAK,C;IACL,UAAgB,E;IAChB,IAAI,IAAK,SAAL,QAAJ,C;MACI,WAAS,cAAA,IAAK,SAAL,G;;IAEb,IAAI,IAAK,GAAL,QAAJ,C;MACI,SAAO,IAAK,G;;IAGhB,gBAAgB,GAAhB,EAAqB,IAArB,C;IAEA,OAAO,G;EACX,C;;IAGI,cAAY,aAAa,IAAK,UAAlB,C;IACZ,eAAa,aAAa,IAAK,YAAlB,C;IACb,cAAY,WAAW,IAAK,YAAhB,C;IACZ,cAAY,WAAW,IAAK,YAAhB,C;IACZ,cAAY,WAAW,IAAK,YAAhB,C;IACZ,gBAAc,WAAW,IAAK,cAAhB,C;IACd,mBAAiB,WAAW,IAAK,iBAAhB,C;IACjB,kBAAgB,WAAW,IAAK,gBAAhB,C;IAChB,mBAAiB,WAAW,IAAK,iBAAhB,C;IACjB,oBAAkB,WAAW,IAAK,kBAAhB,C;IAClB,eAAa,IAAK,S;EACtB,C;;IErGY,iBAAO,qB;IACX,W;EAAA,C;;IAGQ,OAAQ,KAAI,IAAJ,C;IACZ,W;EAAA,C;;IAFA,kBAAQ,uC;IAGZ,W;EAAA,C;;IATA,eAAK,M;IAEL,uBAAQ,gCAAR,C;IAGA,0BAAQ,kCAAR,C;IAKJ,W;EAAA,C;;IAXA,UAAU,yBAAV,C;EAYJ,C;;IAGI,aAAU,E;IACV,aAAU,E;IACV,gBAAa,E;IACb,iBAAc,E;EAJlB,C;;;;;;;;;;;;;;;;;"}